<doc>
    <assembly>
        <name>Zumero.DataGrid</name>
    </assembly>
    <members>
        <member name="T:Zumero.Column">
            <summary>A description of a column within a DataGrid</summary>
            <remarks>
                <para>
          The two most important properties of the DataGrid are 
          <see cref="T:Zumero.DataGrid.Columns" />
          and <see cref="T:Zumero.DataGrid.Rows" />.  

            <list type="bullet"><item><term>The Rows are the data.</term></item><item><term>The Columns describe how to display the data.</term></item></list></para>
                <para>The most important property of the Column is <see cref="T:Zumero.Column.Template" />, which
          is a <c>Xamarin.Forms.DataTemplate</c> object that specifies how the cell View objects for
          that column will be created as needed.</para>
            </remarks>
        </member>
        <member name="C:Zumero.Column">
            <summary>Initializes a new instance of the Column class.</summary>
            <remarks />
        </member>
        <member name="P:Zumero.Column.HeaderView">
            <summary>A View to be placed in the frozen row at the top for this column.</summary>
            <value />
            <remarks>
                <para>
                The views in the Header are typically Labels, but
                any kind of View is acceptable as long you don't mind it being forced to the
                size of the header cell.  
                </para>
                <para>
                    The height of all the header views is controlled by the HeaderHeight property
                    of the DataGrid.  If you are trying to set headers for your columns and
                    they are not showing up, verify that the HeaderHeight of the DataGrid
                    is set appropriately.
                </para>
                <para>
                    The width of each header view is controlled by the width of its column.
                </para>
                <para>
                There is no requirement for all header views to be the same type.  
                </para>
                <para>
                DataGrid does no binding on header views.  It does
                nothing with them except size them, place them, and scroll them.
            </para>
                <para>
                If you provide a HeaderView for the frozen column, and if you have a
                Header as well, then FrozenColumn.HeaderView will be 
                displayed in that awkward, otherwise-wasted space in the upper left corner.
            </para>
            </remarks>
        </member>
        <member name="F:Zumero.Column.HeaderViewProperty">
            <summary>Identifies the HeaderView property.</summary>
            <remarks />
        </member>
        <member name="P:Zumero.Column.Template">
            <summary>A DataTemplate for generating View objects for the cells in this column.</summary>
            <value>
            The DataTemplate object must be configured such that its <c>CreateContent()</c> 
            method returns a <c>Xamarin.Forms.View</c>.
        </value>
            <remarks>
                <para>
                The Template for each Column is a critical piece of the story of how DataGrid
                displays data.
            </para>
                <para>
                Your DataTemplate should return a View which is configured however you want
                the cells in that column to look.
            </para>
                <para>
                Just as importantly, your DataTemplate should setup the bindings for the
                View to get the information you want from the row object.
            </para>
                <example>
                    <para>
                In the example below, each cell in the column will be shown as
                a Label, 100 units wide, with black text centered on a white background.
                </para>
                    <para>
                But what text will be shown?  This comes from the binding.  In this case, the
                text shown in the label will be whatever is contained in the property
                named English from the row object.
                </para>
                    <code lang="C#">
new Column {
    Width = 100,
    Template = new DataTemplate (() =&gt; {
        var v = new Label {
            BackgroundColor = Color.White,
            TextColor = Color.Black,
            XAlign = TextAlignment.Center,
            YAlign = TextAlignment.Center,
        };
        v.SetBinding(Label.TextProperty, "English");
        return v;
    }),
},
</code>
                </example>
                <para>
                DataGrid will ask your provided Template to generate only enough Views to
                handle the number of visible rows.  For example, if your screen size and RowHeight
                are configured such that only 10 rows can be visible at any one time, DataGrid will
                call <c>Template.CreateContent()</c> 10 times for that column.  When the grid is scrolled,
                Views that become invisible are reused for things that become visible.
            </para>
            </remarks>
        </member>
        <member name="F:Zumero.Column.TemplateProperty">
            <summary>Identifies the Template property.</summary>
            <remarks />
        </member>
        <member name="P:Zumero.Column.Width">
            <summary>Width of this column.</summary>
            <value>Negative values not allowed.</value>
            <remarks />
        </member>
        <member name="F:Zumero.Column.WidthProperty">
            <summary>Identifies the Width property.</summary>
            <remarks />
        </member>
        <member name="T:Zumero.DataGrid">
            <summary>
          A Xamarin.Forms control for displaying data in rows and columns.
      </summary>
            <remarks>
                <para>
          The two main properties of the DataGrid are 
          <see cref="T:Zumero.DataGrid.Columns" />
          and <see cref="T:Zumero.DataGrid.Rows" />.  

            <list type="bullet"><item><term>The Rows are the data.</term></item><item><term>The Columns describe how to display the data.</term></item></list></para>
                <para>
        Each cell (the intersection of a row and column) in DataGrid is
        a View.  DataGrid does not support Xamarin.Forms.Cell, but it
        does manage View recycling.  Even if your data has a million rows,
        DataGrid will create and manage only enough View objects for
        the cells which are visible.
            </para>
                <para>
        The type of View in each cell is defined by the column it is
        in.  All cells in a given column will use the same template
        for its Views.
            </para>
                <para>
        The View in a cell can be any kind of Xamarin.Forms.View.
        Common choices include Label, Entry, or Image, but you can
        use anything you want.
            </para>
                <para>
        All rows in a DataGrid are the same height, but each column
        can specify its own width.
            </para>
                <para>
        DataGrid can optionally have one "frozen" column on the left side.
        This column will scroll with the main panel vertically, but it
        does not move when the main panel scrolls horizontally.
            </para>
                <para>
        Similarly, DataGrid can optionally have one frozen row at the top.
        This frozen row is called the Header.  Its horizontal scrolling
        is synchronized with the main panel.  The Header row can have
        a different height from the rows in the main panel.
            </para>
                <para>
        Just as the DataTemplate for each column specifies how cell
        views for that column are to be created, it also specifies
        the bindings for those cell views.  Those bindings specify
        which properties from the "row object" will be used as data
        to be displayed by the cell view.
            </para>
                <para>
        DataGrid requires one data object for each row.  This row
        object is set as the BindingContext for each cell view in that
        row.
            </para>
                <para>
        DataGrid does not draw grid lines, but it does have properties
        to control the spacing between rows and columns.  If you set
        these properties to a positive number then the BackgroundColor
        of the DataGrid will show through in between the cells.  In
        essence, the RowSpacing and ColumnSpacing properties determine
        the width of the grid lines, and the BackgroundColor property
        determines the color of the grid lines.
            </para>
                <para>
        For reasons of performance and the need to scroll both horizontally
        and vertically, DataGrid manages its own scrolling.  Currently,
        this feature is limited to simple scrolling on touch and
        pan.  Features like fling and bounce are not yet supported.
            </para>
                <para>
            Note that because DataGrid is a subclass of Xamarin.Forms.ContentView, it inherits a publicly-visible Content property.
            You should consider this property to be private.
        </para>
                <para>
          To initialize Zumero.DataGrid, call Zumero.DataGridComponent.Init() from your platform code.
          We recommend inserting this call just below the call to Xamarin.Forms.Forms.Init().
        </para>
                <para>
        DataGrid is primarily designed for use cases which involve few
        columns and many rows.  If you have thousands of columns, then
        DataGrid is not your best choice.
            </para>
            </remarks>
        </member>
        <member name="C:Zumero.DataGrid">
            <summary>Initializes a new instance of the DataGrid class.</summary>
            <remarks />
        </member>
        <member name="P:Zumero.DataGrid.Columns">
            <summary>
            Collection of <see cref="T:Zumero.Column" /> objects, each of which describes how to
              display data in one column of the main panel of the grid.
          </summary>
            <value>
              Should not be null.
          </value>
            <remarks>
              If this is an ObservableCollection (recommended), the DataGrid will dynamically update
              when columns are replaced, added, or removed.
          </remarks>
        </member>
        <member name="P:Zumero.DataGrid.ColumnSpacing">
            <summary>
              Spacing between columns. 
          </summary>
            <value>
              Negative values not allowed.
          </value>
            <remarks>
              This value will also be used as the spacing between the frozen left column and the main panel.
        </remarks>
        </member>
        <member name="F:Zumero.DataGrid.ColumnSpacingProperty">
            <summary>Identifies the ColumnSpacing bindable property.</summary>
            <remarks />
        </member>
        <member name="F:Zumero.DataGrid.ColumnsProperty">
            <summary>Identifies the Columns bindable property.</summary>
            <remarks />
        </member>
        <member name="P:Zumero.DataGrid.FrozenColumn">
            <summary>
              Describes the frozen Column to be shown on the left.
            </summary>
            <value>If you don't want a frozen column, just set this to null.</value>
            <remarks>
                <para>
                The FrozenColumn gets its values from the same row object as the other columns.
                In other words, for row number N, the BindingContext for all views in a given
                row, including the view in the frozen column, will be Rows[N].
                </para>
                <para>
                The HeaderView of this Column will be displayed in the upper-left corner.
                </para>
                <para>
                The FrozenColumn can be null, which will mean the DataGrid simply doesn't have
                a frozen column on the left side.
                </para>
            </remarks>
        </member>
        <member name="F:Zumero.DataGrid.FrozenColumnProperty">
            <summary>Identifies the FrozenColumn bindable property.</summary>
            <remarks />
        </member>
        <member name="P:Zumero.DataGrid.HeaderHeight">
            <summary>Height of the frozen row at the top.  </summary>
            <value>Negative values not allowed.</value>
            <remarks>The default value is 50.  If you do not set the HeaderView property of any Columns, you will end up with 50 pixels of empty
            space at the top unless you override this default.  Set the HeaderHeight to 0 if you don't want the header row.</remarks>
        </member>
        <member name="F:Zumero.DataGrid.HeaderHeightProperty">
            <summary>Identifies the HeaderHeight bindable property.</summary>
            <remarks />
        </member>
        <member name="M:Zumero.DataGrid.OnSizeAllocated(System.Double,System.Double)">
            <param name="width" />
            <param name="height" />
            <summary />
            <remarks />
        </member>
        <member name="P:Zumero.DataGrid.RowHeight">
            <summary>
              The height of all rows in the main panel.
          </summary>
            <value>
              Negative values not allowed.
          </value>
            <remarks>
              Except for the Header row (the frozen row at the top), all rows have the same height.  
              The height of the Header row is specified separately using the <see cref="T:Zumero.DataGrid.HeaderHeight" /> property.
          </remarks>
        </member>
        <member name="F:Zumero.DataGrid.RowHeightProperty">
            <summary>Identifies the RowHeight bindable property.</summary>
            <remarks />
        </member>
        <member name="P:Zumero.DataGrid.Rows">
            <summary>The data to be displayed in this DataGrid.</summary>
            <value>
            If Rows is an ObservableCollection (recommended), the DataGrid will dynamically update
            when data rows are replaced, added, or removed.
        </value>
            <remarks>
                <para>
            The data for each row is contained in an object.  The Template for each column contains
            bindings which specify which properties from the row object will be bound for Views
            in that column.
            </para>
                <para>
            If the objects in the Rows collection support INotifyPropertyChanged (recommended),
            changes to properties of the row objects will automatically update the Views in the
            DataGrid, and vice versa.
            </para>
            </remarks>
        </member>
        <member name="P:Zumero.DataGrid.RowSpacing">
            <summary>Spacing between rows.  </summary>
            <value>
              Negative values not allowed.
        </value>
            <remarks>This value will also be used as the spacing between the Header and the main panel below.</remarks>
        </member>
        <member name="F:Zumero.DataGrid.RowSpacingProperty">
            <summary>Identifies the RowSpacing bindable property.</summary>
            <remarks />
        </member>
        <member name="F:Zumero.DataGrid.RowsProperty">
            <summary>Identifies the Rows bindable property.</summary>
            <remarks />
        </member>
    </members>
</doc>
